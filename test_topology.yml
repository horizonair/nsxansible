---
- hosts: localhost
  connection: local
  gather_facts: False
  vars:
    dlr_networks:
      app1: {name: 'App1-Net', ip: '172.16.10.1', network: '172.16.10.0/24', prefix_len: 24, logical_switch: 'app1', iftype: 'internal'}
      app2: {name: 'App2-Net', ip: '172.16.11.1', network: '172.16.11.0/24', prefix_len: 24, logical_switch: 'app2', iftype: 'internal'}
      db1: {name: 'Db1-Net', ip: '172.16.12.1', network: '172.16.12.0/24', prefix_len: 24, logical_switch: 'db1', iftype: 'internal'}
      web1: {name: 'Web1-Net', ip: '172.16.13.1', network: '172.16.13.0/24', prefix_len: 24, logical_switch: 'web1', iftype: 'internal'}
      web2: {name: 'Web2-Net', ip: '172.16.14.1', network: '172.16.14.0/24', prefix_len: 24, logical_switch: 'web2', iftype: 'internal'}
      web3: {name: 'Web3-Net', ip: '172.16.15.1', network: '172.16.15.0/24', prefix_len: 24, logical_switch: 'web3', iftype: 'internal'}
      transit_net: {name: 'transit_net', ip: '172.16.1.2', prefix_len: 24, logical_switch: 'transit_net', iftype: 'uplink'}
    esg_networks:
      uplink: {name: 'uplink', ip: '10.114.209.94', prefix_len: 27, portgroup_id: "{{ gather_moids_upl_pg.object_id }}", iftype: 'uplink'}
      transit_net: {name: 'transit_net', ip: '172.16.1.1', prefix_len: 24, logical_switch: 'transit_net', iftype: 'internal'}
  vars_files:
    - answerfile_TPM_Lab.yml
  tasks:
  - name: gather moid for ds
    vcenter_gather_moids:
      hostname: "{{ vcenter }}"
      username: "{{ vcenter_user }}"
      password: "{{ vcenter_pwd }}"
      datacenter_name: "{{ vcenter_dc }}"
      datastore_name: "{{ vcenter_datastore }}"
      validate_certs: False
    register: gather_moids_ds
    tags: moids
  - name: gather moid for cl
    vcenter_gather_moids:
      hostname: "{{ vcenter }}"
      username: "{{ vcenter_user }}"
      password: "{{ vcenter_pwd }}"
      datacenter_name: "{{ vcenter_dc }}"
      cluster_name: "{{ vcenter_edge_cluster }}"
      validate_certs: False
    register: gather_moids_cl
    tags: moids
  - name: gather moid for uplink vnic
    vcenter_gather_moids:
      hostname: "{{ vcenter }}"
      username: "{{ vcenter_user }}"
      password: "{{ vcenter_pwd }}"
      datacenter_name: "{{ vcenter_dc }}"
      portgroup_name: 'vlan41'
      validate_certs: False
    register: gather_moids_upl_pg
    tags: moids
  - name: gather moid for mgmt portgroup
    vcenter_gather_moids:
      hostname: "{{ vcenter }}"
      username: "{{ vcenter_user }}"
      password: "{{ vcenter_pwd }}"
      datacenter_name: "{{ vcenter_dc }}"
      portgroup_name: 'vlan45'
      validate_certs: False
    register: gather_moids_pg
    tags: moids

  - name: create logical switches
    nsx_logical_switch:
      nsxmanager_spec: "{{ nsxmanager_spec }}"
      state: present
      transportzone: "TZ1"
      name: "{{ item.key }}"
      controlplanemode: "HYBRID_MODE"
      description: "{{ item.value.name }}"
    with_dict: "{{ dlr_networks }}"
    register: logical_switch
    tags: lswitch_create

  - name: ESG creation
    nsx_edge_router:
      nsxmanager_spec: "{{ nsxmanager_spec }}"
      state: present
      name: 'ansibleESG'
      description: 'This ESG is created by nsxansible'
      resourcepool_moid: "{{ gather_moids_cl.object_id }}"
      datastore_moid: "{{ gather_moids_ds.object_id }}"
      datacenter_moid: "{{ gather_moids_cl.datacenter_moid }}"
      interfaces:
        vnic0: 
          ip: "{{ esg_networks.uplink.ip }}" 
          prefix_len: "{{ esg_networks.uplink.prefix_len }}"
          portgroup_id: "{{ esg_networks.uplink.portgroup_id }}"
          name: "{{ esg_networks.uplink.name }}"
          iftype: "{{ esg_networks.uplink.iftype }}"
        vnic1:
          ip: "{{ esg_networks.transit_net.ip }}" 
          prefix_len: "{{ esg_networks.transit_net.prefix_len }}"
          logical_switch: "{{ esg_networks.transit_net.logical_switch }}"
          name: "{{ esg_networks.transit_net.name }}"
          iftype: "{{ esg_networks.transit_net.iftype }}"
      default_gateway: '10.114.209.65'
      routes:
        - { network: "{{ dlr_networks.app1.network }}", next_hop: "{{ dlr_networks.transit_net.ip }}" }
        - { network: "{{ dlr_networks.app2.network }}", next_hop: "{{ dlr_networks.transit_net.ip }}" }
        - { network: "{{ dlr_networks.web1.network }}", next_hop: "{{ dlr_networks.transit_net.ip }}" }
        - { network: "{{ dlr_networks.web2.network }}", next_hop: "{{ dlr_networks.transit_net.ip }}" }
        - { network: "{{ dlr_networks.web3.network }}", next_hop: "{{ dlr_networks.transit_net.ip }}" }
        - { network: "{{ dlr_networks.db1.network }}", next_hop: "{{ dlr_networks.transit_net.ip }}" }
      remote_access: 'true'
      username: 'admin'
      password: 'VMware1!VMware1!'
      firewall: 'false'
      ha_enabled: 'true'
    register: create_esg
    tags: esg_create

  - name: DLR creation
    nsx_dlr:
      nsxmanager_spec: "{{ nsxmanager_spec }}"
      state: present
      name: 'ansibleDLR'
      description: 'This DLR is created by nsxansible'
      resourcepool_moid: "{{ gather_moids_cl.object_id }}"
      datastore_moid: "{{ gather_moids_ds.object_id }}"
      datacenter_moid: "{{ gather_moids_cl.datacenter_moid }}"
      mgmt_portgroup_moid: "{{ gather_moids_pg.object_id }}"
      interfaces:
        - name: "{{ dlr_networks.app1.name }}"
          ip: "{{ dlr_networks.app1.ip }}"
          prefix_len: "{{ dlr_networks.app1.prefix_len }}"
          logical_switch: "{{ dlr_networks.app1.logical_switch }}"
          iftype: "{{ dlr_networks.app1.iftype }}"
        - name: "{{ dlr_networks.app2.name }}"
          ip: "{{ dlr_networks.app2.ip }}"
          prefix_len: "{{ dlr_networks.app2.prefix_len }}"
          logical_switch: "{{ dlr_networks.app2.logical_switch }}"
          iftype: "{{ dlr_networks.app2.iftype }}"
        - name: "{{ dlr_networks.db1.name }}"
          ip: "{{ dlr_networks.db1.ip }}"
          prefix_len: "{{ dlr_networks.db1.prefix_len }}"
          logical_switch: "{{ dlr_networks.db1.logical_switch }}"
          iftype: "{{ dlr_networks.db1.iftype }}"
        - name: "{{ dlr_networks.web1.name }}"
          ip: "{{ dlr_networks.web1.ip }}"
          prefix_len: "{{ dlr_networks.web1.prefix_len }}"
          logical_switch: "{{ dlr_networks.web1.logical_switch }}"
          iftype: "{{ dlr_networks.web1.iftype }}"
        - name: "{{ dlr_networks.web2.name }}"
          ip: "{{ dlr_networks.web2.ip }}"
          prefix_len: "{{ dlr_networks.web2.prefix_len }}"
          logical_switch: "{{ dlr_networks.web2.logical_switch }}"
          iftype: "{{ dlr_networks.web2.iftype }}"
        - name: "{{ dlr_networks.web3.name }}"
          ip: "{{ dlr_networks.web3.ip }}"
          prefix_len: "{{ dlr_networks.web3.prefix_len }}"
          logical_switch: "{{ dlr_networks.web3.logical_switch }}"
          iftype: "{{ dlr_networks.web3.iftype }}"
        - name: "{{ dlr_networks.transit_net.name }}"
          ip: "{{ dlr_networks.transit_net.ip }}"
          prefix_len: "{{ dlr_networks.transit_net.prefix_len }}"
          logical_switch: "{{ dlr_networks.transit_net.logical_switch }}"
          iftype: "{{ dlr_networks.transit_net.iftype }}"
      default_gateway: "{{ esg_networks.transit_net.ip }}"
      remote_access: 'true'
      username: 'admin'
      password: 'VMware1!VMware1!'
      ha_enabled: 'true'
    register: create_dlr
    tags: dlr_create
